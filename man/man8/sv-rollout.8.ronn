sv-rollout(8) -- restart multiple runit services concurrently
=============================================================

## SYNOPSIS

`sv-rollout` `-pattern` <glob> [`-verbose`] [`-canary-ratio` <ratio>] [`-canary-timeout-tolerance` <ratio>] [`-chunk-ratio` <ratio>] [`-timeout-tolerance` <ratio>] [`-timeout` <seconds>] [`-min-interval-ms` <milliseconds>]

## DESCRIPTION

**sv-rollout** is a utility to restart multiple runit services concurrently. It
supports canaries and has configurable tolerance for timeouts. The only required
option is `-pattern`, which is used to match entries in `/etc/service` using a simple
shell globbing parser (for example, you could pass `borg-*` to restart all borg
services).

By default, sv-rollout will first restart one service (`-canary-ratio`) to make
sure the container works, then will restart the remaining containers 20% at a
time (`-chunk-ratio`). No container restarts are allowed to time out
(`-canary-timeout-tolerance` and `-timeout-tolerance`).

## OPTIONS

  * `-canary-ratio`=<ratio>:
    Canary nodes are restarted first. If they fail, the deploy is failed.
    Rounded up to the nearest node, unless set to zero.

  * `-chunk-ratio`=<ratio>:
    After canary nodes, ratio of remaining nodes permitted to restart
    concurrently.

  * `-canary-timeout-tolerance`=<ratio>:
    Ratio of canary nodes that are permitted to time out without causing the
    deploy to fail.

  * `-timeout-tolerance`=<ratio>:
    Ratio of total nodes whose restarts may time out and still consider the
    deploy a success. The deploy will be immediately aborted if this threshold
    is exceeded.

  * `-timeout`=<seconds>:
    Number of seconds to wait for a service to restart before considering it
    timed out and moving on.

  * `-min-interval-ms`=<milliseconds>:
    Minimum number of milliseconds to wait between `sv restart` invocations.

  * `-verbose`:
    Print more information about what's going on, especially the absolute values
    that ratios resolve to.

## EXAMPLES

### Job servers

Here, we want to restart a small handful first to make sure the new container is
actually good, after which we pretty much want to restart everything ASAP.

We can use canaries for this, but we need to be mindful of the fact that jobs
can take a while to restart. So we pick a small handful of services to restart
first, allowing most of them to time out (but not fail outright). After that, we
just restart everything, allowing most of them to time out (but again, not fail
outright).

```
sv-rollout \
  -canary-ratio 0.1 \             # restart 10% first
  -canary-timeout-tolerance 0.7 \ # allow up to 70% of those to time out
  -chunk-ratio 1 \                # after canaries, restart 100% concurrently
  -timeout-tolerance 0.8 \        # allow up to 80% of remaining to time out
  -timeout 300 \                  # wait up to 300s for each service before considering it "timed out"
  -min-interval-ms 2000 \         # stagger things a bit to make it easier on docker
  -pattern 'borg-shopify-jobs-*'  # any services matching /etc/service/<pattern>
```

### App servers

Here, we have five containers, and want to restart them one at a time, accepting
no timeouts. Much simpler!

```
sv-rollout \
  -canary-ratio 0 \                 # no canaries.
  -chunk-ratio 0.2 \                # restart 20% of servers concurrently (ie.  no concurrency)
  -timeout-tolerance 0 \            # even a single timeout will abort the deploy
  -timeout 300 \                    # wait up to 300s for each service before considering it "timed out"
  -pattern 'borg-shopify-unicorn-*' # any services matching /etc/service/<pattern>
```

## BUGS

CLI UX is not nearly as friendly as the `deployify` tool this replaces.

## COPYRIGHT

sv-rollout is copyright (C) 2014 Shopify

## SEE ALSO

runit(8), sv(8)
